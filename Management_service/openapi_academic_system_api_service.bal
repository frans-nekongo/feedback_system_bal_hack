// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerinax/kafka;
import ballerina/log; // Import the logging module

listener http:Listener ep0 = new (9090, config = {host: "localhost"});

// Request and response record definitions
type memos_body record {
    // Define fields as needed
};

type questions_body record {
    // Define fields as needed
};

type inline_response_200 record {
    // Define fields as needed
};

type inline_response_200_1 record {
    string idNumber; // Unique ID of the user.
    string name;     // Name of the user.
    string userType; // Type of user: "student" or "lecturer".
};

type AuthRequest record {
    string username;
    string password;
};

type AuthResponse record {
    string idNumber; // Unique ID of the user
    string name;     // Name of the user
    string userType; // Type of user: "student" or "lecturer"
    string status;   // e.g., "success" or "error"
    string message;  // Additional message if needed (optional)
};

service / on ep0 {
    private final kafka:Producer authProducer;
    private final kafka:Consumer authConsumer;

    function init() returns error? {
        self.authProducer = check new (kafka:DEFAULT_URL);
        self.authConsumer = check new (kafka:DEFAULT_URL, {
            groupId: "authGroup"
        });

        // Subscribe to the authrep topic
        check self.authConsumer->subscribe(["authrep"]);
    }

    # Check if a user exists
    #
    # + return - returns can be any of following types 
    # inline_response_200_1 (User details if found.)
    # http:NotFound (User not found.)
    # http:Unauthorized (Invalid credentials.)
    resource function get auth(string username, string password) returns inline_response_200_1|http:Unauthorized|error {
        // Create an AuthRequest record with the provided username and password
        AuthRequest request = {username: username, password: password};

        // Send the authentication request to the Kafka topic "authreq"
        check self.authProducer->send({
            topic: "authreq",
            value: request
        });

        // Poll for the authentication response from the authrep topic
        AuthResponse[] responses = check self.authConsumer->pollPayload(15); // Wait for a max of 15 seconds for messages

        if (responses.length() == 0) {
            // If no response, log a message indicating no authentication was received
            log:printInfo("No authentication response received for user: " + username);
            return error("No authentication response received."); // Return an error with a log message
        }

        // Process the received responses
        AuthResponse response = responses[0]; // Handle the first response
        if (response.status == "success") {
            // Populate and return user details based on the response
            inline_response_200_1 userResponse = {
                idNumber: response.idNumber,
                name: response.name,
                userType: response.userType
            };
            return userResponse; // Return user details
        } else {
            // Handle authentication error
            log:printInfo("Authentication failed for user: " + username + ". Status: " + response.status);
            // return http:Unauthorized; // Return Unauthorized if authentication fails
            return error("Authentication failed.");
        }
    }

    // The following resources can be defined as needed

    // # Retrieve all memos due
    // #
    // # + return - List of tests with memos due and their questions. 
    // resource function get memosDue() returns inline_response_200[] {
    // }

    // # Retrieve all tests and their questions
    // #
    // # + return - List of tests with their questions. 
    // resource function get tests() returns inline_response_200[] {
    // }

    // # Send a memo
    // #
    // # + payload - The memo details to be sent. 
    // # + return - Memo successfully submitted. 
    // resource function post memos(@http:Payload memos_body payload) returns http:Created {
    // }

    // # Send a question
    // #
    // # + payload - The question details to be sent. 
    // # + return - Question successfully submitted. 
    // resource function post questions(@http:Payload questions_body payload) returns http:Created {
    // }
}
