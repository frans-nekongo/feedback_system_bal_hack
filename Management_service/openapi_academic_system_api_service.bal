// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerina/log; // Import the logging module
import ballerinax/kafka;

listener http:Listener ep0 = new (9090, config = {host: "localhost"});

// Request and response record definitions
type memos_body record {
    // Define fields as needed
};

type questions_body record {
    // Define fields as needed
};

type inline_response_200 record {
    // Define fields as needed
};

type inline_response_200_1 record {
    string idNumber; // Unique ID of the user.
    string name; // Name of the user.
    string userType; // Type of user: "student" or "lecturer".
};

type AuthRequest record {
    string username;
    string password;
};

type AuthResponse record {
    string idNumber; // Unique ID of the user
    string name; // Name of the user
    string userType; // Type of user: "student" or "lecturer"
    string status; // e.g., "success" or "error"
    string message; // Additional message if needed (optional)
};

//  Create a subtype of `kafka:AnydataConsumerRecord`.
// Define the structure of the message received from Kafka
type AuthResponseMessage record {
    string name;
    string message; // This is a string representation of the inner JSON
};

// Create a subtype of `kafka:AnydataConsumerRecord`
type AuthConsumerRecord record {|
    *kafka:AnydataConsumerRecord;
    AuthResponseMessage value; // Change this to the new type
|};

service / on ep0 {
    private final kafka:Producer authProducer;
    private final kafka:Consumer authConsumer;

    function init() returns error? {
        self.authProducer = check new (kafka:DEFAULT_URL);
        self.authConsumer = check new (kafka:DEFAULT_URL, {
            groupId: "authGroup",
            topics: "authrep"
        });

        // Subscribe to the authrep topic
        check self.authConsumer->subscribe(["authrep"]);
    }

    # Check if a user exists
    #
    # + return - returns can be any of following types 
    # inline_response_200_1 (User details if found.)
    # http:NotFound (User not found.)
    # http:Unauthorized (Invalid credentials.)
     resource function get auth(string username, string password) returns string|inline_response_200_1|error {
    AuthRequest request = {username: username, password: password};

    log:printInfo("Sending authentication request: " + request.toString());

    // Send the authentication request to the Kafka topic "authreq"
    check self.authProducer->send({
        topic: "authreq",
        value: request
    });

    while true {
        // Poll for messages from the authrep topic
        AuthConsumerRecord[] records = check self.authConsumer->poll(15);
        if (records.length() > 0) {
            from AuthConsumerRecord orderRecord in records
            do {
                log:printInfo("Received record from authrep: " + orderRecord.value.toString());

                // Deserialize the outer message
                string name = orderRecord.value.name; // This should be a string
                string innerMessage = orderRecord.value.message; // Get the inner message string

                // Deserialize the inner message
                json userData = check innerMessage.fromJsonString();

                // Create the authResponse object
                inline_response_200_1 authResponse = {
                    idNumber: check userData.user_number,
                    name: check userData.name,
                    userType: check userData.user_type
                };

                log:printInfo("Authentication successful for user: " + authResponse.toString());
                return authResponse; // Return the constructed authResponse
            };
        }
    }

    // Return unauthorized error if no valid response was received
    
}

}

    // The following resources can be defined as needed

    // # Retrieve all memos due
    // #
    // # + return - List of tests with memos due and their questions. 
    // resource function get memosDue() returns inline_response_200[] {
    // }

    // # Retrieve all tests and their questions
    // #
    // # + return - List of tests with their questions. 
    // resource function get tests() returns inline_response_200[] {
    // }

    // # Send a memo
    // #
    // # + payload - The memo details to be sent. 
    // # + return - Memo successfully submitted. 
    // resource function post memos(@http:Payload memos_body payload) returns http:Created {
    // }

    // # Send a question
    // #
    // # + payload - The question details to be sent. 
    // # + return - Question successfully submitted. 
    // resource function post questions(@http:Payload questions_body payload) returns http:Created {
    // }

